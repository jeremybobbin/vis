#!/bin/sh -e
# Based on the configure script from musl libc, MIT licensed

usage() {
	cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  --srcdir=DIR            source directory [detected]

Installation directories:
  --prefix=PREFIX         main installation prefix [/usr/local]
  --exec-prefix=EPREFIX   installation prefix for executable files [PREFIX]

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sharedir=DIR          share directories [PREFIX/share]
  --docdir=DIR            misc. documentation [PREFIX/share/doc]
  --mandir=DIR            man pages [PREFIX/share/man]

Optional features:
  --enable-curses         build with Curses terminal output [yes]
  --enable-lua            build with Lua support [auto]
  --enable-lpeg-static    build with LPeg static linking [auto]
  --enable-tre            build with TRE regex support [auto]
  --enable-selinux        build with SELinux support [auto]
  --enable-acl            build with POSIX ACL support [auto]
  --enable-help           build with built-in help texts [yes]

Some influential environment variables:
  CC                      C compiler command [detected]
  CFLAGS                  C compiler flags [-Os -pipe ...]
  LDFLAGS                 Linker flags

Use these variables to override the choices made by configure.

EOF
}

# Beginning of actual script
CFLAGS_AUTO=
LDFLAGS_AUTO=
SRCDIR=
PREFIX=/usr/local
EXEC_PREFIX='$(PREFIX)'
BINDIR='$(EXEC_PREFIX)/bin'
SHAREDIR='$(PREFIX)/share'
DOCDIR='$(PREFIX)/share/doc'
MANDIR='$(PREFIX)/share/man'

help=yes
curses=yes
lua=auto
lpeg=auto
tre=auto
selinux=auto
acl=auto

stripdir() {
	printf '%s' "${1#*=}" | tr '\n' ' ' | sed 's,/*$,,'
}

for arg; do
	case "$arg" in
	--help|-h) usage; exit 0 ;;
	--srcdir=*) SRCDIR="$(stripdir "$arg")";;
	--prefix=*) PREFIX="$(stripdir "$arg")";;
	--exec-prefix=*) EXEC_PREFIX="$(stripdir "$arg")";;
	--bindir=*) BINDIR="$(stripdir "$arg")";;
	--sharedir=*) SHAREDIR="$(stripdir "$arg")";;
	--docdir=*) DOCDIR="$(stripdir "$arg")";;
	--mandir=*) MANDIR="$(stripdir "$arg")";;
	--enable-help|--enable-help=yes) help=yes ;;
	--disable-help|--enable-help=no) help=no ;;
	--enable-curses|--enable-curses=yes) curses=yes ;;
	--disable-curses|--enable-curses=no) curses=no ;;
	--enable-lua|--enable-lua=yes) lua=yes ;;
	--disable-lua|--enable-lua=no) lua=no ;;
	--enable-lpeg-static|--enable-lpeg-static=yes) lpeg=yes ;;
	--disable-lpeg-static|--enable-lpeg-static=no) lpeg=no ;;
	--enable-tre|--enable-tre=yes) tre=yes ;;
	--disable-tre|--enable-tre=no) tre=no ;;
	--enable-selinux|--enable-selinux=yes) selinux=yes ;;
	--disable-selinux|--enable-selinux=no) selinux=no ;;
	--enable-acl|--enable-acl=yes) acl=yes ;;
	--disable-acl|--enable-acl=no) acl=no ;;
	--with-release-version=*) VERSION=${arg#*=} ;;
	--enable-*|--disable-*|--with-*|--without-*|--*dir=*|--build=*) ;;
	-*) printf "%s: unknown option %s\n" "$0" "$arg" >&2 ;;
	CC=*) CC="${arg#*=}" ;;
	CFLAGS=*) CFLAGS="${arg#*=}" ;;
	LDFLAGS=*) LDFLAGS="${arg#*=}" ;;
	*=*) ;;
	*) ;;
	esac
done

fail() {
	printf "%s\n" "$*" >&2
	exit 1
}

#
# Get the source dir for out-of-tree builds
#
if test -z "$SRCDIR"; then
	SRCDIR="$(realpath "${0%/configure}")"
fi
if ! abs_builddir="$(pwd)"; then
	fail "$0: cannot determine working directory"
elif ! abs_srcdir="$(cd "$SRCDIR" && pwd)"; then
	fail "$0: invalid source directory $SRCDIR"
elif [ "$abs_srcdir" = "$abs_builddir" ]; then
	SRCDIR=.
elif test -f Makefile -a ! -h Makefile; then
	fail "$0: Makefile already exists in the working directory"
fi

#
# Get a temp filename we can use
#
i=0
until tmp="./conf$$-$PPID-$i"; ( : > "$tmp.c" && : > "$tmp.o" ) 2>/dev/null; do
	i=$((i + 1))
	if [ "$i" -ge 50 ]; then
		fail "$0: cannot create temporary file $tmp.c"
	fi
done

trap 'rm -f $tmp.c $tmp.o' EXIT QUIT TERM HUP
trap 'printf "\n%s: interrupted\n" "$0" >&2; exit 1' INT

#
# Find a C compiler to use
#
printf "checking for C compiler... " >&2
for c in cc gcc clang; do
	if [ -n "$CC" ]; then
		break
	elif type "$c" >/dev/null 2>&1; then
		CC="$c"
	fi
done

if [ -z "$CC" ]; then
	fail "$0: cannot find a C compiler"
else
	printf "%s\n" "$CC" >&2
fi

printf "checking whether C compiler works... " >&2
printf "%s\n" "typedef int x;" > "$tmp.c"
if "$CC" $CFLAGS -c -o "$tmp.o" "$tmp.c"; then
	printf "yes\n" >&2
else
	printf "no\n" >&2
	exit 1
fi

CFLAGS_STD="-std=c99 -D_POSIX_C_SOURCE=200809L -U_XOPEN_SOURCE -D_XOPEN_SOURCE=700 -DNDEBUG"
LDFLAGS_STD="-lc"

case "$(uname)" in
NetBSD)            selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_NETBSD_SOURCE" ;;
*BSD|DragonFly)    selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_BSD_SOURCE" ;;
Darwin)            selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_DARWIN_C_SOURCE" ;;
AIX)               selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_ALL_SOURCE" ;;
esac


# Try flags to harden & to optimize binary size
# Test -Werror=unknown-compiler-option & -Werror=unknown-linker-option
printf "%s\n" "typedef int x;" > "$tmp.c"

tryflag() {
	printf "checking whether compiler accepts %s... " "$*" >&2
	if "$CC" "$@" -c -o "$tmp.o" "$tmp.c" >/dev/null 2>&1; then
		printf "yes\n" >&2
		return 0
	else
		printf "no\n" >&2
		return 1
	fi
}

tryldflag() {
	printf "checking whether linker accepts %s... " "$*"
	if "$CC" -nostdlib -shared "$@" -o "$tmp.o" "$tmp.c" >&2; then
		printf "yes\n"
		return 0
	else
		printf "no\n"
		return 1
	fi
}

# some compilers won't fail when given an unrecognized option
# find the option to ensure that CC will fail when given an unknown option
LDFLAGS_TRY=""
CFLAGS_TRY=""
for err in unknown-warning-option unused-command-line-argument; do
	if [ -z "$TRY_CFLAGS" ] && tryflag "-Werror=$err" 1>&2 2>/dev/null; then
		TRY_CFLAGS="$err"
	fi
	if [ -z "$TRY_LDFLAGS" ] && tryldflag "-Werror=$err" 1>&2 2>/dev/null; then
		TRY_LDFLAGS="$err"
	fi
done

if ! tryflag $CFLAGS_TRY $CFLAGS 1>&2; then
	fail "$0: user-provided CFLAGS fail"
fi

if ! tryldflag $LDFLAGS_TRY $LDFLAGS 1>&2; then
	fail "$0: user-provided LDFLAGS fail"
fi

for f in -Wall -pipe -O2 -ffunction-sections -fdata-sections; do
	if tryflag $CFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		CFLAGS="$f $CFLAGS"
	fi
done

for f in -fstack-protector-all; do
	if tryflag $CFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		CFLAGS_AUTO="$f $CFLAGS_AUTO"
	fi
done

for f in -Wl,-z,now -Wl,-z,relro; do
	if tryldflag $LDFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		LDFLAGS="$f $LDFLAGS"
	fi
done

for f in -pie -Wl,--gc-sections; do
	if tryldflag $LDFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		LDFLAGS_AUTO="$f $LDFLAGS_AUTO"
	fi
done

printf "checking for pkg-config... " >&2
if type pkg-config >/dev/null 2>&1; then
	have_pkgconfig=yes
	printf "yes\n" >&2
else
	have_pkgconfig=no
	printf "no\n" >&2
fi

if test "$help" = "yes"; then
	CONFIG_HELP=1
else
	CONFIG_HELP=0
fi

CONFIG_CURSES=0

if test "$curses" != "no"; then

	printf "checking for libcurses...\n" >&2

	cat >"$tmp.c" <<EOF
#include <curses.h>

int main(int argc, char *argv[]) {
	initscr();
	endwin();
	return 0;
}
EOF

	for libcurses in ncursesw ncurses curses; do
		printf " checking for %s... " "$libcurses" >&2

		if test "$have_pkgconfig" = "yes"; then
			if
				CFLAGS_CURSES="$(pkg-config --cflags "$libcurses" 2>/dev/null)" &&
				LDFLAGS_CURSES="$(pkg-config --libs "$libcurses" 2>/dev/null)" &&
				"$CC" $CFLAGS $CFLAGS_CURSES "$tmp.c" $LDFLAGS $LDFLAGS_CURSES -o "$tmp.o" #>/dev/null 2>&1
			then
				CONFIG_CURSES=1
				printf "yes\n" >&2
				break
			fi
		fi

		CFLAGS_CURSES=""
		LDFLAGS_CURSES="-l$libcurses"

		if "$CC" $CFLAGS $CFLAGS_CURSES "$tmp.c" \
			$LDFLAGS $LDFLAGS_CURSES -o "$tmp.o" >/dev/null 2>&1; then
			CONFIG_CURSES=1
			printf "yes\n" >&2
			break
		else
			CFLAGS_CURSES=""
			LDFLAGS_CURSES=""
			printf "no\n" >&2
		fi
	done

	if test "$curses" = "yes" -a "$CONFIG_CURSES" -ne 1; then
		fail "$0: cannot find libcurses"
	fi
fi

CONFIG_TRE=0
REGEX_SRC=text-regex.c

if test "$tre" != "no"; then

	printf "checking for libtre... " >&2

	cat >"$tmp.c" <<EOF
#include <stddef.h>
#include <tre/tre.h>

int main() {
	regex_t preg;
	tre_str_source *source = NULL;
	regmatch_t pmatch[1];
	tre_regcomp(&preg, "\0", REG_EXTENDED);
	tre_reguexec(&preg, source, 1, pmatch, 0);
	tre_regfree(&preg);
	return 0;
}
EOF

	if test "$have_pkgconfig" = "yes"; then
		CFLAGS_TRE=$(pkg-config --cflags tre 2>/dev/null)
		LDFLAGS_TRE=$(pkg-config --libs tre 2>/dev/null)
	fi

	if test -z "$LDFLAGS_TRE"; then
		CFLAGS_TRE=""
		LDFLAGS_TRE="-ltre"
	fi

	if "$CC" $CFLAGS $CFLAGS_TRE "$tmp.c" \
		$LDFLAGS $LDFLAGS_TRE -o "$tmp.o" >/dev/null 2>&1; then
		CONFIG_TRE=1
		REGEX_SRC=text-regex-tre.c
		printf "%s\n" "yes" >&2
	else
		printf "%s\n" "no" >&2
		CFLAGS_TRE=""
		LDFLAGS_TRE=""
		if test "$tre" = "yes"; then
			fail "$0: cannot find libtre"
		fi
	fi
fi

CONFIG_LUA=0

# enabling builtin lpeg requires lua support
if test "$lpeg" = "yes" -a "$lua" = "no"; then
	fail "$0: need lua support for built-in lpeg"
fi
if test "$lpeg" = "yes"; then
	lua=yes
fi

if test "$lua" != "no"; then

	printf "checking for liblua >= 5.1 ...\n" >&2

	cat >"$tmp.c" <<EOF
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>

#if LUA_VERSION_NUM < 501
#error "Need at least Lua 5.1"
#endif

int main(int argc, char *argv[]) {
	lua_State *L = luaL_newstate();
	luaL_openlibs(L);
	lua_close(L);
	return 0;
}
EOF

	for liblua in lua lua5.4 lua5.3 lua5.2 lua-5.4 lua-5.3 lua-5.2 lua54 lua53 lua52 luajit; do
		printf " checking for %s... " "$liblua" >&2

		if test "$have_pkgconfig" = "yes"; then
			if
				CFLAGS_LUA="$(pkg-config --cflags "$liblua" 2>/dev/null)" &&
				LDFLAGS_LUA="$(pkg-config --libs "$liblua" 2>/dev/null)" && \
				$CC $CFLAGS $CFLAGS_LUA "$tmp.c" \
					$LDFLAGS $LDFLAGS_LUA -o "$tmp.o" >/dev/null 2>&1
			then
				CONFIG_LUA=1
				printf "yes\n" >&2
				break
			fi
		fi

		CFLAGS_LUA=""
		LDFLAGS_LUA="-l$liblua -lm -ldl"

		if "$CC" $CFLAGS $CFLAGS_LUA "$tmp.c" \
			$LDFLAGS $LDFLAGS_LUA -o "$tmp.o" >/dev/null 2>&1; then
			CONFIG_LUA=1
			printf "yes\n" >&2
			break
		else
			printf "no\n" >&2
			CFLAGS_LUA=""
			LDFLAGS_LUA=""
		fi
	done

	if test "$lua" = "yes" -a "$CONFIG_LUA" -ne 1; then
		fail "$0: cannot find liblua"
	fi

	if test "$CONFIG_LUA" -eq 1; then
		CFLAGS_LUA="$CFLAGS_LUA -DLUA_COMPAT_5_1 -DLUA_COMPAT_5_2 -DLUA_COMPAT_5_3 -DLUA_COMPAT_ALL"
	fi
fi

CONFIG_LPEG=0

if test $CONFIG_LUA -eq 1 -a "$lpeg" != "no"; then

	printf "checking for Lua statically linked liblpeg...\n" >&2

	cat >"$tmp.c" <<EOF
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>

int main(int argc, char *argv[]) {
	lua_State *L = luaL_newstate();
	luaL_openlibs(L);
	extern int luaopen_lpeg(lua_State *L);
	lua_getglobal(L, "package");
	lua_getfield(L, -1, "preload");
	lua_pushcfunction(L, luaopen_lpeg);
	lua_setfield(L, -2, "lpeg");
	lua_pop(L, 2);
	lua_close(L);
	return 0;
}
EOF

	for liblpeg in lpeg lua5.4-lpeg lua5.3-lpeg lua5.2-lpeg; do
		printf " checking for static %s... " "$liblpeg" >&2

		if test "$have_pkgconfig" = "yes"; then
			if
				CFLAGS_LPEG=$(pkg-config --cflags $liblpeg 2>/dev/null) &&
				LDFLAGS_LPEG=$(pkg-config --libs $liblpeg 2>/dev/null) &&
					"$CC" $CFLAGS $CFLAGS_LUA $CFLAGS_LPEG "$tmp.c" \
					$LDFLAGS $LDFLAGS_LUA $LDFLAGS_LPEG -o "$tmp.o" >/dev/null 2>&1
			then
				CONFIG_LPEG=1
				printf "yes\n" >&2
				break
			fi
		fi

		CFLAGS_LPEG=""
		LDFLAGS_LPEG="-l$liblpeg"

		if "$CC" $CFLAGS $CFLAGS_LUA $CFLAGS_LPEG "$tmp.c" \
			$LDFLAGS $LDFLAGS_LUA $LDFLAGS_LPEG -o "$tmp.o" >/dev/null 2>&1; then
			CONFIG_LPEG=1
			printf "yes\n" >&2
			break
		else
			printf "no\n" >&2
			CFLAGS_LPEG=""
			LDFLAGS_LPEG=""
		fi
	done

	if test "$lpeg" = "yes" -a $CONFIG_LPEG -ne 1; then
		fail "$0: cannot find liblpeg"
	fi
fi

CONFIG_ACL=0

if test "$acl" != "no"; then
	printf "checking for libacl...\n" >&2

	cat >"$tmp.c" <<EOF
#include <sys/types.h>
#include <sys/acl.h>

int main(int argc, char *argv[]) {
	acl_t acl = acl_get_fd(0);
	return 0;
}
EOF

	for libacl in acl libacl; do
		printf " checking for %s... " "$libacl" >&2
		if
			test "$have_pkgconfig" = "yes" &&
			CFLAGS_ACL=$(pkg-config --cflags "$libacl" 2>/dev/null) &&
			LDFLAGS_ACL=$(pkg-config --libs "$libacl" 2>/dev/null)
		then
			:
		else
			CFLAGS_ACL=""
			LDFLAGS_ACL="-lacl"
		fi
		if "$CC" $CFLAGS $CFLAGS_ACL "$tmp.c" \
			$LDFLAGS $LDFLAGS_ACL -o "$tmp.o" >/dev/null 2>&1; then
			CONFIG_ACL=1
			printf "%s\n" "yes" >&2
			break
		else
			printf "%s\n" "no" >&2
			CFLAGS_ACL=""
			LDFLAGS_ACL=""
		fi
	done
	if test "$acl" = "yes" -a "$CONFIG_ACL" -ne 1; then
		fail "$0: cannot find libacl"
	fi
fi

CONFIG_SELINUX=0

if test "$selinux" != "no"; then
	printf "checking for libselinux... " >&2

	cat >"$tmp.c" <<EOF
#include <selinux/selinux.h>

int main(int argc, char *argv[]) {
	return is_selinux_enabled();
}
EOF

	if
		test "$have_pkgconfig" = "yes" &&
		CFLAGS_SELINUX=$(pkg-config --cflags selinux 2>/dev/null) &&
		LDFLAGS_SELINUX=$(pkg-config --libs selinux 2>/dev/null)
	then
		:
	else
		CFLAGS_SELINUX=""
		LDFLAGS_SELINUX="-lselinux"
	fi

	if "$CC" $CFLAGS $CFLAGS_SELINUX "$tmp.c" \
		$LDFLAGS $LDFLAGS_SELINUX -o "$tmp.o" >/dev/null 2>&1; then
		CONFIG_SELINUX=1
		printf "%s\n" "yes" >&2
	else
		printf "%s\n" "no" >&2
		CFLAGS_SELINUX=""
		LDFLAGS_SELINUX=""
		if test "$selinux" = "yes"; then
			fail "$0: cannot find libselinux"
		fi
	fi
fi

printf "checking for memrchr... " >&2

cat >"$tmp.c" <<EOF
#define _GNU_SOURCE
#include <string.h>

int main(int argc, char *argv[]) {
        return !memrchr("\n", '\n', 1);
}
EOF

if "$CC" $CFLAGS $CFLAGS_STD "$tmp.c" $LDFLAGS -o "$tmp.o" >/dev/null 2>&1; then
	HAVE_MEMRCHR=1
	printf "%s\n" "yes" >&2
else
	HAVE_MEMRCHR=0
	printf "%s\n" "no" >&2
fi

if [ -n "${VERSION}" ]; then
	:
elif
	printf "checking for commit hash... " >&2
	VERSION="$(git describe --always --dirty 2>/dev/null)"
then
	printf "%s\n" "$VERSION" >&2
else
	VERSION="v0.9-git"
	printf "%s\n" "no" >&2
fi


printf "creating config.mk... " >&2

cat > config.mk <<EOF
# This version of config.mk was generated by the vis configure script
# Any changes made here will be lost if configure is re-run
SRCDIR = $SRCDIR
PREFIX = $PREFIX
EXEC_PREFIX = $EXEC_PREFIX
BINDIR = $BINDIR
DOCPREFIX = $DOCDIR
MANPREFIX = $MANDIR
SHAREPREFIX = $SHAREDIR

CC = $CC
CFLAGS = $CFLAGS
LDFLAGS = $LDFLAGS
CFLAGS_STD = $CFLAGS_STD
LDFLAGS_STD = $LDFLAGS_STD
CFLAGS_AUTO = $CFLAGS_AUTO
LDFLAGS_AUTO = $LDFLAGS_AUTO
CFLAGS_DEBUG = -U_FORTIFY_SOURCE -UNDEBUG -O0 -g3 -ggdb -Wall -Wextra -pedantic -Wno-missing-field-initializers -Wno-unused-parameter

CONFIG_HELP = $CONFIG_HELP
CONFIG_CURSES = $CONFIG_CURSES
CFLAGS_CURSES = $CFLAGS_CURSES
LDFLAGS_CURSES = $LDFLAGS_CURSES
REGEX_SRC = $REGEX_SRC
CONFIG_TRE = $CONFIG_TRE
CFLAGS_TRE = $CFLAGS_TRE
LDFLAGS_TRE = $LDFLAGS_TRE
CONFIG_LUA = $CONFIG_LUA
CFLAGS_LUA = $CFLAGS_LUA
LDFLAGS_LUA = $LDFLAGS_LUA
CONFIG_LPEG = $CONFIG_LPEG
CFLAGS_LPEG = $CFLAGS_LPEG
LDFLAGS_LPEG = $LDFLAGS_LPEG
CONFIG_ACL = $CONFIG_ACL
CFLAGS_ACL = $CFLAGS_ACL
LDFLAGS_ACL = $LDFLAGS_ACL
CONFIG_SELINUX = $CONFIG_SELINUX
CFLAGS_SELINUX = $CFLAGS_SELINUX
LDFLAGS_SELINUX = $LDFLAGS_SELINUX
CFLAGS_LIBC = -DHAVE_MEMRCHR=$HAVE_MEMRCHR
VERSION = $VERSION
EOF

if [ "$SRCDIR" != "." ]; then
	ln -sf "$SRCDIR/Makefile" .
fi

printf "done\n" >&2
