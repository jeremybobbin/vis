#!/bin/sh -e
# Based on the configure script from musl libc, MIT licensed

usage() {
	cat <<EOF
Usage: $0 [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  --srcdir=DIR            source directory [detected]

Installation directories:
  --prefix=PREFIX         main installation prefix [/usr/local]
  --exec-prefix=EPREFIX   installation prefix for executable files [PREFIX]

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sharedir=DIR          share directories [PREFIX/share]
  --docdir=DIR            misc. documentation [PREFIX/share/doc]
  --mandir=DIR            man pages [PREFIX/share/man]

Optional features:
  --enable-curses         build with Curses terminal output [yes]
  --enable-lua            build with Lua support [auto]
  --enable-lpeg-static    build with LPeg static linking [auto]
  --enable-tre            build with TRE regex support [auto]
  --enable-selinux        build with SELinux support [auto]
  --enable-acl            build with POSIX ACL support [auto]
  --enable-help           build with built-in help texts [yes]

Some influential environment variables:
  CC                      C compiler command [detected]
  CFLAGS                  C compiler flags [-Os -pipe ...]
  LDFLAGS                 Linker flags

Use these variables to override the choices made by configure.

EOF
}

# Beginning of actual script
CFLAGS="-Wextra -Wpedantic -Wno-missing-field-initializers -Wno-unused-parameter"
CFLAGS_AUTO=
LDFLAGS_AUTO=
SRCDIR=
PREFIX=/usr/local
EXEC_PREFIX='$(PREFIX)'
BINDIR='$(EXEC_PREFIX)/bin'
SHAREDIR='$(PREFIX)/share'
DOCDIR='$(PREFIX)/share/doc'
MANDIR='$(PREFIX)/share/man'

help=yes
curses=yes
lua=auto
lpeg=auto
tre=auto
selinux=auto
acl=auto

stripdir() {
	printf '%s' "${1#*=}" | tr '\n' ' ' | sed 's,/*$,,'
}

for arg; do
	case "$arg" in
	--help|-h) usage; exit 0 ;;
	--srcdir=*) SRCDIR="$(stripdir "$arg")";;
	--prefix=*) PREFIX="$(stripdir "$arg")";;
	--exec-prefix=*) EXEC_PREFIX="$(stripdir "$arg")";;
	--bindir=*) BINDIR="$(stripdir "$arg")";;
	--sharedir=*) SHAREDIR="$(stripdir "$arg")";;
	--docdir=*) DOCDIR="$(stripdir "$arg")";;
	--mandir=*) MANDIR="$(stripdir "$arg")";;
	--enable-help|--enable-help=yes) help=yes ;;
	--disable-help|--enable-help=no) help=no ;;
	--enable-curses|--enable-curses=yes) curses=yes ;;
	--disable-curses|--enable-curses=no) curses=no ;;
	--enable-lua|--enable-lua=yes) lua=yes ;;
	--disable-lua|--enable-lua=no) lua=no ;;
	--enable-lpeg-static|--enable-lpeg-static=yes) lpeg=yes ;;
	--disable-lpeg-static|--enable-lpeg-static=no) lpeg=no ;;
	--enable-tre|--enable-tre=yes) tre=yes ;;
	--disable-tre|--enable-tre=no) tre=no ;;
	--enable-selinux|--enable-selinux=yes) selinux=yes ;;
	--disable-selinux|--enable-selinux=no) selinux=no ;;
	--enable-acl|--enable-acl=yes) acl=yes ;;
	--disable-acl|--enable-acl=no) acl=no ;;
	--debug) debug=yes;;
	--with-release-version=*) VERSION=${arg#*=} ;;
	--enable-*|--disable-*|--with-*|--without-*|--*dir=*|--build=*) ;;
	-*) printf "%s: unknown option %s\n" "$0" "$arg" >&2 ;;
	CC=*) CC="${arg#*=}" ;;
	CFLAGS=*) CFLAGS="${arg#*=}" ;;
	LDFLAGS=*) LDFLAGS="${arg#*=}" ;;
	*=*) ;;
	*) ;;
	esac
done

fail() {
	printf "%s\n" "$*" >&2
	exit 1
}

#
# Get the source dir for out-of-tree builds
#
if test -z "$SRCDIR"; then
	SRCDIR="$(realpath "${0%/configure}")"
fi
if ! abs_builddir="$(pwd)"; then
	fail "$0: cannot determine working directory"
elif ! abs_srcdir="$(cd "$SRCDIR" && pwd)"; then
	fail "$0: invalid source directory $SRCDIR"
elif [ "$abs_srcdir" = "$abs_builddir" ]; then
	SRCDIR=.
elif test -f Makefile -a ! -h Makefile; then
	fail "$0: Makefile already exists in the working directory"
fi

#
# Get a temp filename we can use
#
tmp="$(mktemp)"

trap 'rm -f $tmp.c $tmp.o $tmp.mk' EXIT QUIT TERM HUP
trap 'printf "\n%s: interrupted\n" "$0" >&2; exit 1' INT

#
# Find a C compiler to use
#
printf "checking for C compiler... " >&2
for c in cc gcc clang; do
	if [ -n "$CC" ]; then
		break
	elif type "$c" >/dev/null 2>&1; then
		CC="$c"
	fi
done

if [ -z "$CC" ]; then
	fail "$0: cannot find a C compiler"
else
	printf "%s\n" "$CC" >&2
fi

printf "checking whether C compiler works... " >&2
printf "%s\n" "typedef int x;" > "$tmp.c"
if "$CC" $CFLAGS -c -o "$tmp.o" "$tmp.c"; then
	printf "yes\n" >&2
else
	printf "no\n" >&2
	exit 1
fi

# POSIX(200809L): text-io.c - openat renameat unlinkat fstatat; X - char width
CFLAGS_STD="-std=c99 -D_XOPEN_SOURCE=700 -D_POSIX_C_SOURCE=200809L"
LDFLAGS_STD="-lc"

case "$(uname)" in
NetBSD)            selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_NETBSD_SOURCE" ;;
*BSD|DragonFly)    selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_BSD_SOURCE" ;;
Darwin)            selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_DARWIN_C_SOURCE" ;;
AIX)               selinux="no"; acl="no"; CFLAGS_STD="$CFLAGS_STD -D_ALL_SOURCE" ;;
esac


# Try flags to harden & to optimize binary size
# Test -Werror=unknown-compiler-option & -Werror=unknown-linker-option
printf "%s\n" "typedef int x;" > "$tmp.c"

tryflag() {
	printf "checking whether compiler accepts %s... " "$*" >&2
	if "$CC" "$@" -c -o "$tmp.o" "$tmp.c" >/dev/null 2>&1; then
		printf "yes\n" >&2
		return 0
	else
		printf "no\n" >&2
		return 1
	fi
}

tryldflag() {
	printf "checking whether linker accepts %s... " "$*"
	if "$CC" -nostdlib -shared "$@" -o "$tmp.o" "$tmp.c" >&2; then
		printf "yes\n"
		return 0
	else
		printf "no\n"
		return 1
	fi
}

# some compilers won't fail when given an unrecognized option
# find the option to ensure that CC will fail when given an unknown option
LDFLAGS_TRY=""
CFLAGS_TRY=""
for err in unknown-warning-option unused-command-line-argument; do
	if [ -z "$TRY_CFLAGS" ] && tryflag "-Werror=$err" 1>&2 2>/dev/null; then
		TRY_CFLAGS="$err"
	fi
	if [ -z "$TRY_LDFLAGS" ] && tryldflag "-Werror=$err" 1>&2 2>/dev/null; then
		TRY_LDFLAGS="$err"
	fi
done

if ! tryflag $CFLAGS_TRY $CFLAGS 1>&2; then
	fail "$0: user-provided CFLAGS fail"
fi

if ! tryldflag $LDFLAGS_TRY $LDFLAGS 1>&2; then
	fail "$0: user-provided LDFLAGS fail"
fi

for f in -Wall -O2 -ffunction-sections -fdata-sections; do
	if tryflag $CFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		CFLAGS="$f $CFLAGS"
	fi
done

for f in -fstack-protector-all; do
	if tryflag $CFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		CFLAGS_AUTO="$f $CFLAGS_AUTO"
	fi
done

for f in -Wl,-z,now -Wl,-z,relro; do
	if tryldflag $LDFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		LDFLAGS="$f $LDFLAGS"
	fi
done

for f in -pie -Wl,--gc-sections; do
	if tryldflag $LDFLAGS_TRY "$f" 1>&2 2>/dev/null; then
		LDFLAGS_AUTO="$f $LDFLAGS_AUTO"
	fi
done

printf "checking for pkg-config... " >&2
if type pkg-config >/dev/null 2>&1; then
	have_pkgconfig=yes
	printf "yes\n" >&2
else
	have_pkgconfig=no
	printf "no\n" >&2
fi

resolve() {
	for lib in "$@"; do
		printf " checking for %s... " "$lib" >&2

		if test "$have_pkgconfig" = "yes"; then
			if
				cflags="$(pkg-config --cflags "$lib" 2>/dev/null)" &&
				ldflags="$(pkg-config --libs "$lib" 2>/dev/null)" &&
				"$CC" $CFLAGS $cflags "$tmp.c" $LDFLAGS $ldflags -o "$tmp.o" >/dev/null 2>&1 &&
				"$tmp.o" >/dev/null 2>&1
			then
				cflags="${cflags%% }"
				ldflags="${ldflags%% }"
				printf "yes\n" >&2
				return 0
			fi
		fi

		cflags=""
		ldflags="-l$lib"

		if
			"$CC" $CFLAGS $RCFLAGS $cflags "$tmp.c" $LDFLAGS $RLDFLAGS $ldflags -o "$tmp.o" >/dev/null 2>&1 &&
			"$tmp.o" >/dev/null 2>&1
		then
			printf "yes\n" >&2
			return 0
		else
			cflags=""
			ldflags=""
			printf "no\n" >&2
		fi
	done
	return 1
}

if [ -n "${VERSION}" ]; then
	:
elif
	printf "checking for commit hash... " >&2
	VERSION="$(git describe --always --dirty 2>/dev/null)"
then
	printf "%s\n" "$VERSION" >&2
else
	VERSION="v0.9-git"
	printf "%s\n" "no" >&2
fi

exec > "$tmp.mk"

CONFIG_STRING=""

UI_TERMINAL_BACKEND=ui-terminal-vt100

if [ "$curses" = "no" ]; then
	:
else
	printf "checking for libcurses...\n" >&2

	cat > "$tmp.c" <<- EOF
	#include <curses.h>

	int main(int argc, char *argv[]) {
		initscr();
		endwin();
		return 0;
	}
	EOF

	if resolve ncursesw ncurses curses; then
		echo "CFLAGS_CURSES=-DCONFIG_CURSES $cflags"
		echo "LDFLAGS_CURSES=$ldflags"
		CONFIG_STRING="$CONFIG_STRING +curses"
		UI_TERMINAL_BACKEND=ui-terminal-curses
	else
		fail "$0: cannot find libcurses"
	fi
fi

# enabling builtin lpeg requires lua support
if [ "$lpeg" = "yes" ] && [ "$lua" = "no" ]; then
	fail "$0: need lua support for built-in lpeg"
fi

if [ "$lpeg" = "yes" ]; then
	lua=yes
fi

if [ "$lua" = "no" ]; then
	:
else

	printf "checking for liblua >= 5.1 ...\n" >&2

	cat >"$tmp.c" <<- EOF
	#include <lua.h>
	#include <lualib.h>
	#include <lauxlib.h>

	#if LUA_VERSION_NUM < 501
	#error "Need at least Lua 5.1"
	#endif

	int main(int argc, char *argv[]) {
		lua_State *L = luaL_newstate();
		luaL_openlibs(L);
		lua_close(L);
		return 0;
	}
	EOF

	if RLDFLAGS="-l -ldl" resolve lua lua5.4 lua5.3 lua5.2 lua-5.4 lua-5.3 lua-5.2 lua54 lua53 lua52 luajit; then
		echo "CFLAGS_LUA=-DCONFIG_LUA $cflags"
		echo "LDFLAGS_LUA=$ldflags"
		lua="yes"
		CONFIG_STRING="$CONFIG_STRING +lua"
	else
		fail "$0: cannot find liblua"
	fi
fi

if [ "$lpeg" != "yes" ]; then
	:
elif [ "$lua" = "no" ]; then
	:#fail "$0: need lua support for built-in lpeg"
else
	printf "checking for Lua statically linked liblpeg...\n" >&2

	cat >"$tmp.c" <<- EOF
	#include <lua.h>
	#include <lualib.h>
	#include <lauxlib.h>

	int main(int argc, char *argv[]) {
		lua_State *L = luaL_newstate();
		luaL_openlibs(L);
		extern int luaopen_lpeg(lua_State *L);
		lua_getglobal(L, "package");
		lua_getfield(L, -1, "preload");
		lua_pushcfunction(L, luaopen_lpeg);
		lua_setfield(L, -2, "lpeg");
		lua_pop(L, 2);
		lua_close(L);
		return 0;
	}
	EOF

	if RLDFLAGS="-lm -ldl $LDFLAGS_LUA" RCFLAGS="$CFLAGS_LUA"  resolve lpeg lua5.4-lpeg lua5.3-lpeg lua5.2-lpeg; then
		echo "CFLAGS_LPEG=-DCONFIG_LPEG $cflags"
		echo "LDFLAGS_LPEG=$ldflags"
		CONFIG_STRING="$CONFIG_STRING +lpeg"
	elif [ "$lpeg" = "yes" ]; then
		fail "$0: cannot find liblpeg"
	fi
fi

REGEX=text-regex

if [ "$tre" = "no" ]; then
	:
else

	printf "checking for libtre...\n" >&2

	cat > "$tmp.c" <<- EOF
	#include <stddef.h>
	#include <tre/tre.h>

	int main() {
		regex_t preg;
		tre_str_source *source = NULL;
		regmatch_t pmatch[1];
		tre_regcomp(&preg, "", REG_EXTENDED);
		tre_regexec(&preg, "", 1, pmatch, 0);
		tre_regfree(&preg);
		return 0;
	}
	EOF

	if resolve tre; then
		echo "CFLAGS_TRE=-DCONFIG_TRE $cflags"
		echo "LDFLAGS_TRE=$ldflags"
		CONFIG_STRING="$CONFIG_STRING +tre"
		REGEX=text-regex-tre
	else
		fail "$0: cannot find libtre"
	fi
fi


if [ "$acl" = "no" ]; then
	:
else
	printf "checking for libacl...\n" >&2

	cat > "$tmp.c" <<- EOF
	#include <sys/types.h>
	#include <sys/acl.h>

	int main(int argc, char *argv[]) {
		acl_t acl = acl_get_fd(0);
		return 0;
	}
	EOF

	if resolve acl libacl; then
		echo "CFLAGS_ACL=-DCONFIG_ACL $cflags"
		echo "LDFLAGS_ACL=$ldflags"
		CONFIG_STRING="$CONFIG_STRING +acl"
	elif [ "$acl" = "yes" ]; then
		fail "$0: cannot find libacl"
	fi
fi

if [ "$selinux" = "no" ]; then
	:
else
	printf "checking for libselinux...\n" >&2

	cat >"$tmp.c" <<- EOF
	#include <selinux/selinux.h>

	int main(int argc, char *argv[]) {
		return is_selinux_enabled();
	}
	EOF

	if resolve selinux; then
		echo "CFLAGS_SELINUX=-DCONFIG_SELINUX $cflags"
		echo "LDFLAGS_SELINUX=$ldflags"
		CONFIG_STRING="$CONFIG_STRING +selinux"
	elif [ "$selinux" = "yes" ]; then
		fail "$0: cannot find libselinux"
	fi
fi

printf "checking for memrchr... " >&2

cat > "$tmp.c" <<- EOF
#include <string.h>

int main(int argc, char *argv[]) {
        return !memrchr("\n", '\n', 1);
}
EOF

if "$CC" $CFLAGS $CFLAGS_STD "$tmp.c" $LDFLAGS -o "$tmp.o" >/dev/null 2>&1 && "$tmp.o"; then
	CFLAGS_STD="$CFLAGS_STD -DCONFIG_MEMRCHR"
	printf "%s\n" "yes" >&2
else
	printf "%s\n" "no" >&2
fi

if test "$help" = "yes"; then
	CFLAGS_STD="$CFLAGS_STD -DCONFIG_HELP"
fi


printf "creating config.mk... " >&2

exec >&-

CFLAGS_RELEASE="$CFLAGS"
CFLAGS_DEBUG="-U_FORTIFY_SOURCE -DDEBUG -O0 -g3 -ggdb"

if [ "$debug" = "yes" ]; then
	CFLAGS="$CFLAGS_DEBUG"
fi

# remove any SOURCE definitions declared from pkg-config
(cat -; sed 's,-D_[A-Z_]*SOURCE[0-9=]*,,g' "$tmp.mk") > config.mk <<EOF
# cmdline: $0 $@
#
# This version of config.mk was generated by the vis configure script
# Any changes made here will be lost if configure is re-run
SRCDIR=$SRCDIR
PREFIX=$PREFIX
EXEC_PREFIX=$EXEC_PREFIX
BINDIR=$BINDIR
DOCPREFIX=$DOCDIR
MANPREFIX=$MANDIR
SHAREPREFIX=$SHAREDIR

CC=$CC
CFLAGS=$CFLAGS
LDFLAGS=$LDFLAGS
CFLAGS_STD=-DCONFIG_STRING="\"$CONFIG_STRING\"" -DVERSION="\"$VERSION\"" $CFLAGS_STD
LDFLAGS_STD=$LDFLAGS_STD
CFLAGS_AUTO=$CFLAGS_AUTO
LDFLAGS_AUTO=$LDFLAGS_AUTO
CFLAGS_RELEASE=$CFLAGS_RELEASE
CFLAGS_DEBUG=-U_FORTIFY_SOURCE -DDEBUG -O0 -g3 -ggdb

REGEX=$REGEX
UI_TERMINAL_BACKEND=$UI_TERMINAL_BACKEND
EOF

if [ "$SRCDIR" != "." ]; then
	ln -sf "$SRCDIR/Makefile" .
fi

printf "done\n" >&2
